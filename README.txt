******
******
README
******
******

**********************
TL;DR, IT DOESN’T WORK
**********************

Common problems:

THERE ARE NO AUDIO FILES INCLUDED due to copyright reasons. Place 5 audio files named “Audio1.mp3”, “Audio2.mp3” through to “Audio5.mp3” in the “Test Audio” folder to use the demo, or “0short.mp3” through “4short.mp3” in the “Listening Tests” directory to try the listening tests. The song titles that remain in the UI are from my own test files :)

You may have to build the “Library/UATC” project before the other projects will build, depending on your version of Xcode or compiler. If in doubt, just know that the output of the “Library/UATC.xcodeproj” should be linked in with anything that includes UATC.h.

********
Overview
********

Thanks for downloading! Firstly, throughout the repository you will find references to ‘UATC’. This is an old name for the project, and it was deemed safer to keep the code so named for now, as there are lot of hidden references dotted about.

The most interesting part (IMO) resides in the MATLAB folder, the contents of which consist the majority of the AES paper. Run ‘UATCDemo.m’ to get a feel for how the model works, and ‘RenderUATC’ to write coefficients to a C++ file that can be read by the projects in either the “Demo” or “Listening Tests” projects.

*********
Structure
*********

MATLAB/

Contains “UATCDemo” which demos the model (I recommend trying this first) and “RenderUATC”, which has the ability to print filter coefficients into…

MATLAB/CoefficientsOut/

Here we have some great big C++ lookup tables full of coefficients (auto-generated by MATLAB, by “RenderUATC”). These should be included in any compilation of the UATC project under…

Library/

Here we have a C++ implementation of the library. This should work under OS X or iOS, or any other platform if you remove the dependency on the Accelerate framework (here used to do a very fast IFFT). We have several different “DspEffectors” that implement different DSP algorithms (IIR, IIR second-order sections, FIR in time domain, frequency-domain FIR, and FdFIR using the accelerate framework). If you don’t have the Accelerate framework (i.e. not mac or iOS), change the line “effector[i] = new uatcEffectorFdfireff();” to use a different DspEffector. Fdfir is best, then FIR. Both are pretty inefficient, especially FIR. IIR can be unstable.

Demo/ and Listening Tests/

Here are two applications that pull in the UATC library. As noted above, you will need to place your own audio files in the appropriate places (again, see above).

I may update this README with further details when I get more feedback. Good luck!